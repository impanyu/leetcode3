class Solution {
//shifting based, two categories of methods:
//1.shift bit by bit
//2.shift bits by bits
public:
    int hammingWeight(uint32_t n) {
        int ans=0;
        int bitcounts[256];
        for(int i=0;i<256;i++){
            bitset<8> bs(i);
            bitcounts[i]= bs.count();
        }
        while(n>0){
            ans+=bitcounts[n & 0xff];
            n=n>>8;
        }
        return ans;
    }
};

//non-shifting
//Brian Kernighanâ€™s Algorithm
class Solution {
public:
    int hammingWeight(uint32_t n) {
        int count=0;
        while(n){
           n&=(n-1);
           count++;
        }
        return count;
    }
};
