class Solution {
//dfs to find the number of connected components
//another method is union find
public:   
    void dfs(vector<vector<char>>& grid, int i, int j){
         int height=grid.size();
         int width=grid[0].size();
         grid[i][j]='0';
         if(i>=1 && grid[i-1][j]=='1') dfs(grid,i-1,j);
         if(i<=height-2 && grid[i+1][j]=='1') dfs(grid,i+1,j);
         if(j>=1 && grid[i][j-1]=='1') dfs(grid,i,j-1);
         if(j<=width-2 && grid[i][j+1]=='1') dfs(grid,i,j+1);
        
        
    }    
    int numIslands(vector<vector<char>>& grid) {
        int height=grid.size();
        if(height==0) return 0;
        int width=grid[0].size();
        int count=0;
        
        for(int i=0;i<height;i++){
            for(int j=0;j<width;j++){
                if(grid[i][j]=='1'){
                    dfs(grid,i,j);
                    count++;
                }
            }
        }
        return count;
        
    }
};
