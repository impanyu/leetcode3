/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
//floyd's tortoise and hare algorithm
//can also use hashset for 2 hackup method
public:
    ListNode *detectCycle(ListNode *head) {
        ListNode* tortoise =head;
        ListNode* hare=head;
        while(hare!=NULL && hare->next!=NULL){
            tortoise=tortoise->next;
            hare=hare->next;
            hare=hare->next;
            if(tortoise==hare)
                break;
        }
        if(hare==NULL)
            return NULL;
        
        ListNode* ptr1=head;
        ListNode* ptr2=tortoise;
        while(ptr1!=ptr2){
            ptr1=ptr1->next;
            ptr2=ptr2->next;
        }
        return ptr1;
        
    }
};
