class Solution {
//this is a shortcut answer, which only holds for integer coordinates. There would be equalateral triangle cases if not restricted to integer coordinates.
private:
    int d(vector<int>&p1, vector<int>& p2){
        return (p1[0]-p2[0])*(p1[0]-p2[0])+(p1[1]-p2[1])*(p1[1]-p2[1]);
    }
public:
    bool validSquare(vector<int>& p1, vector<int>& p2, vector<int>& p3, vector<int>& p4) {
       unordered_set<int> edges({d(p1,p2),d(p1,p3),d(p1,p4),d(p2,p3),d(p2,p4),d(p3,p4)});
       if(edges.count(0)!=0 || edges.size()!=2) return false;
       return true;
       
    }
};
