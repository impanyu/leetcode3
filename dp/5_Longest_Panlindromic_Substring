class Solution {
//one dimensional dp, space complexity O(n)
public:
    string longestPalindrome(string s) {
        int N=s.length();
        if(N==0) return "";
        int maxlength=1;
        int start=0,end=0;
        int dp[N];
        int i=N-1,j=N-1;
        for(;i>=0;i--){
            for(j=N-1;j>=i;j--){
                if(i==j || i+1==j) dp[j]=1 && (s[i]==s[j]);
                else dp[j]=dp[j-1] && (s[i]==s[j]);
                if(dp[j] && maxlength < j-i+1){
                    maxlength=j-i+1;
                    start=i;
                    end=j;
                }
            }
        }   
        return s.substr(start,maxlength);       
    }
};
