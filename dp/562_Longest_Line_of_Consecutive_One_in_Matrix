class Solution {
//1. 2 dimensional dp
//2. the exception is dp[i][2], where we need to store dp[i-1][2] before last update
public:
    int longestLine(vector<vector<int>>& M) {
        if(M.size()==0) return 0;
        int dp[M[0].size()][4];
        for(auto row: dp)
            for(int i=0;i<4;i++)
                 row[i]=0;
        int res = 0;
        for (auto row: M) {
            //0 - left 1 - top 2- top left 3- top right
            int topLeft = 0;
            for (int i = 0; i < row.size(); i++) {
                int temp = dp[i][2];
                if (row[i] == 0) {
                    dp[i][0] = 0;
                    dp[i][1] = 0;
                    dp[i][2] = 0;
                    dp[i][3] = 0;
                }
                else {
                    dp[i][0] = (i == 0) ? 1 : (dp[i - 1][0] + 1);
                    dp[i][1] = dp[i][1] + 1;
                    dp[i][2] = topLeft + 1;
                    dp[i][3] = (i == row.size() - 1) ? 1 : (dp[i + 1][3] + 1);
                    for (int j = 0; j < 4; j++) {
                        res = max(res, dp[i][j]);
                    }
                }
                topLeft = temp;
            }
        }
        return res;
    }
};

