class Solution {
//1. simple recursion. pay attention for single digit, only 0, 1, 8 make sense
//2. recursion with n-2 rather than n-1
//3. most outter padding can not be 0
public:
    vector<string> findS(int n, int originaln) {
        vector<string> ans;
        if(n==0) {
            return {""};
        }
        else if(n==1){
            ans={"0","1","8"};
            return ans;
        }
        else{
          vector<string> numbers=findS(n-2,originaln);
          for(string num : numbers){
              ans.push_back("1"+num+"1");
              ans.push_back("6"+num+"9");
              ans.push_back("9"+num+"6");
              ans.push_back("8"+num+"8");
              if(n!=originaln)
                  ans.push_back("0"+num+"0");
          }
        }
        return ans;
    }
    vector<string> findStrobogrammatic(int n){
       return findS(n,n);
    }
};
