/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
//1. define a Compare functor for Interval
//2.iterate through the intervals and update the ans accordingly
public:
    class Compare
    {
     public:
       bool operator() (Interval a, Interval b)
       {
           return a.start<b.start;
        }
    };
    vector<Interval> merge(vector<Interval>& intervals) {
        sort(intervals.begin(),intervals.end(),Compare());
        vector<Interval> ans;
        for(auto interval : intervals){
            if(ans.empty() || interval.start>ans.back().end)
                ans.push_back(Interval(interval.start,interval.end));
            else 
                ans.back().end=max(ans.back().end,interval.end);        
        }
        return ans;
    }
};
