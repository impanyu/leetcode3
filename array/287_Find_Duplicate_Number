class Solution {
//1. Floyd's Tortoise and Hare(cycle detection) algorithm
//2. can also use a hashset, binary search or imposing signal
//3. compared with problem 142, there's no open end point, so in the first part, the while loop does not need to take care of null pointers
    
public:
    int findDuplicate(vector<int>& nums) {
         // Find the intersection point of the two runners.
        int tortoise = nums[0];
        int hare = nums[0];
        while (true){
            tortoise = nums[tortoise];
            hare = nums[nums[hare]];
            if(tortoise==hare)
                break;
        } 

        // Find the "entrance" to the cycle.
        int ptr1 = nums[0];
        int ptr2 = tortoise;
        while (ptr1 != ptr2) {
            ptr1 = nums[ptr1];
            ptr2 = nums[ptr2];
        }

        return ptr1;
    }
};
