class Solution {
//1.iterate through all possible coordinates sum
public:
    vector<int> findDiagonalOrder(vector<vector<int>>& matrix) {
        vector<int> ans;
        if(matrix.size()==0) return ans;
        int M=matrix.size(), N=matrix[0].size();
        
        int direction=0;
        for(int d=0;d<=M+N-2;d++){
            for(int j=d*direction;j<=d+d*direction;j++){
                if(abs(j)>=N) continue;
                int i=d-abs(j);
                if(i>=0 && i<M) 
                    ans.push_back(matrix[i][abs(j)]);
            }
            direction=-1-direction;
        }
        return ans;
    }
};



//method2: more concise, no need to shift between directions
class Solution {
public:
    vector<int> findDiagonalOrder(vector<vector<int>>& matrix) {
        vector<int> ans;
        if(matrix.size()==0) return ans;
        int r = 0, c = 0, m = matrix.size(), n = matrix[0].size();
        for (int i = 0; i < m*n; i++) {
            ans.push_back(matrix[r][c]);
            if ((r + c) % 2 == 0) { // moving up
                if      (c == n - 1) { r++; }
                else if (r == 0)     { c++; }
                else            { r--; c++; }
            } else {                // moving down
                if      (r == m - 1) { c++; }
                else if (c == 0)     { r++; }
                else            { r++; c--; }
            }   
        }   
        return ans;
    }
};

