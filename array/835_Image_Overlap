class Solution {
//1.loop on each pair of ones in A,B and accumulate the shift count accordingly
//2. similar to approach 2 of the original answer
//3. still O(n^4) in worst case
//4. again a trick for encoding pair of numbers
public:
    int largestOverlap(vector<vector<int>>& A, vector<vector<int>>& B) {
        vector<int> LA, LB;
        int N = A.size();
        unordered_map<int, int> count;
        for (int i = 0; i < N * N; ++i) if (A[i / N][i % N] == 1) LA.push_back(i / N * 100 + i % N);
        for (int i = 0; i < N * N; ++i) if (B[i / N][i % N] == 1) LB.push_back(i / N * 100 + i % N);
        for (int i: LA) for (int j: LB) count[i - j]++;
        int res = 0;
        for (auto it: count) res = max(res, it.second);
        return res;
    }
};
