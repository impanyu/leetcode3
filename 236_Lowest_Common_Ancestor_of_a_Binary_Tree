/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
private:
    //use backtracking to get the path from root to node p
    bool pathToNode(TreeNode* root, TreeNode* p, vector<TreeNode*>* path){
        path->push_back(root);
        
        if(root==p) return true;
        else{
            if(root->left!=NULL && pathToNode(root->left,p,path)) return true;
            if(root->right!=NULL && pathToNode(root->right,p,path)) return true;            
        }
        path->pop_back();
        return false;
    }
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(root==NULL) return NULL;
        vector<TreeNode*>* path1=new vector<TreeNode*>();
        vector<TreeNode*>* path2=new vector<TreeNode*>();;
        pathToNode(root,p,path1);
        pathToNode(root,q,path2);
        int i=0;
        int j=0;
        cout<<path1->size();
        cout<<path2->size();
        //compare the two paths
        while(i<path1->size() && j<path2->size() && path1->at(i)==path2->at(j) ){
            i++;
            j++;          
        }        
        return path1->at(i-1);
        
    }
};
