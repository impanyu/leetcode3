class Solution {
//1. double propelled two pointers
//2. for each loop:
//    a. skip all X
//    b. if start[i]!= start[j] or the L of start is to the left of the corresponding L in end, or the R of start is to the right of its counterpart in end. return false
//3. return true when pass all the checks
public:
    bool canTransform(string start, string end) {
        int N = start.size();
        int i = 0, j = 0;
        while (i < N && j < N) {
            while (i < N && start[i] == 'X') i++;
            while (j < N && end[j] == 'X') j++;
            /* At this point, i == N or S[i] != 'X',
               and j == N or T[j] != 'X'.  i and j
               are the indices representing the next
               occurrences of non-X characters in S and T.
            */

            // If only one of i < N and j < N, then it isn't solid-
            // there's more people in one of the strings.
            if ((i < N) ^ (j < N)) return false;

            if (i < N && j < N) {
                // If the person isn't the same, it isn't solid.
                // Or, if the person moved backwards, it isn't accessible.
                if (start[i] != end[j] || (start[i] == 'L' && i < j) ||
                        (start[i] == 'R' && i > j) )
                    return false;
            }
            i++;
            j++;
        }
        return true;
    }
};
