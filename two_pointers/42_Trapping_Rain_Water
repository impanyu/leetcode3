class Solution {
//1.compared with dp, for each position here we git rid of two values(right_max and left max) and only keeps the left max to the left of left pointer and right max to the right of right pointer
//2. for each iteration, choose the smaller pointer to move left or right accordingly
//3. always keeps lmax < max(r,rmax) and rmax < max(l,lmax)
public:
    int trap(vector<int>& height) {
        int left=0, right=height.size()-1;
        int ans=0;
        int left_max=0,right_max=0;
        while(left<right){
            if(height[left]<height[right]){
                 height[left] >= left_max ? (left_max = height[left]) : ans += (left_max - height[left]);
            ++left;
            }
            else{
                 height[right] >= right_max ? (right_max = height[right]) : ans += (right_max - height[right]);
            --right;
            }
        }
        return ans;
    }
};
