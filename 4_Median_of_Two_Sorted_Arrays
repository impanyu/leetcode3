class Solution {
//1.a extention of binary search
//2.another approach is merging two arrays and find the midpoint. But this is a O(n+m) method.
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int m=nums1.size();
        int n=nums2.size();
        if(m>n) {
            swap(nums1,nums2);
            swap(m,n);
        }
        int imin=0,imax=m,i,j,median;
        
        while(imin<=imax){
            i=(imin+imax)/2;
            j=(m+n+1)/2-i;
            if(i<m && j>0 && nums2[j-1]>nums1[i]) imin=i+1;
            else if(i>0 && j<n && nums2[j]<nums1[i-1]) imax=i-1;
            else{
                if(i==0) median=nums2[j-1];
                else if(j==0) median=nums1[i-1];
                else median=max(nums1[i-1],nums2[j-1]);
                break;           
            }
                     
        }
    
        if((n+m)%2==1) return (double)median;
        else if(i==m) return (median+nums2[j])/2.0;
        else if(j==n) return (median+nums1[i])/2.0;
        return (median+min(nums1[i],nums2[j]))/2.0;
    }
};
